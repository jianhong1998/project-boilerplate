services:
  postgres:
    image: postgres:16.4-alpine3.20
    ports:
      - '${DATABASE_PORT:-5432}:5432'
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DATABASE_USER:-postgres}
      POSTGRES_DB: ${DATABASE_DB:-invoice_management_app_db}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-Password1234}
    env_file:
      - path: ./.env
        required: true
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d invoice_management_app_db']
      interval: 10s
      timeout: 5s
      retries: 5

  server:
    ports:
      - '${BACKEND_PORT:-3001}:${BACKEND_PORT:-3001}'
    build:
      context: ./backend
      dockerfile: ../docker/local/Dockerfile.backend
    network_mode: host
    env_file: ./.env
    # depends_on:
    #   postgres:
    #     condition: service_healthy
    #     restart: true
    develop:
      watch:
        - path: ./backend/src
          target: /apps/backend/src
          action: sync+restart
        - path: ./backend/package.json
          action: rebuild
        - path: ./backend/package-lock.json
          action: rebuild

  db-migration-service:
    build:
      context: ./backend
      dockerfile: ../docker/local/Dockerfile.db-migration
    env_file:
      - ./.env
    network_mode: host
    # depends_on:
    #   postgres:
    #     condition: service_healthy

  client:
    ports:
      - '${FRONTEND_PORT:-3000}:${FRONTEND_PORT:-3000}'
    build:
      context: ./frontend
      dockerfile: ../docker/local/Dockerfile.frontend
    network_mode: host
    env_file:
      - ./.env
    develop:
      watch:
        - path: ./frontend/src
          target: /apps/crud-dapp/src
          action: sync
        - path: ./frontend/package.json
          action: rebuild
